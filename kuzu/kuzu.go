// THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS.

// WARNING: This file has automatically been generated on Thu, 04 Jul 2024 09:53:47 PDT.
// Code generated by https://git.io/c-for-go. DO NOT EDIT.

package kuzu

/*
#cgo LDFLAGS: -lkuzu
#include <kuzu.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>
#include "cgo_helpers.h"
*/
import "C"
import (
	"runtime"
	"unsafe"
)

// DatabaseInit function as declared in include/kuzu.h:319
func DatabaseInit(databasePath string, systemConfig SystemConfig) *Database {
	databasePath = safeString(databasePath)
	cdatabasePath, cdatabasePathAllocMap := unpackPCharString(databasePath)
	csystemConfig, csystemConfigAllocMap := systemConfig.PassValue()
	__ret := C.kuzu_database_init(cdatabasePath, csystemConfig)
	runtime.KeepAlive(csystemConfigAllocMap)
	runtime.KeepAlive(databasePath)
	runtime.KeepAlive(cdatabasePathAllocMap)
	__v := NewDatabaseRef(unsafe.Pointer(__ret))
	return __v
}

// DatabaseDestroy function as declared in include/kuzu.h:325
func DatabaseDestroy(database *Database) {
	cdatabase, cdatabaseAllocMap := database.PassRef()
	C.kuzu_database_destroy(cdatabase)
	runtime.KeepAlive(cdatabaseAllocMap)
}

// DatabaseSetLoggingLevel function as declared in include/kuzu.h:331
func DatabaseSetLoggingLevel(loggingLevel string) {
	loggingLevel = safeString(loggingLevel)
	cloggingLevel, cloggingLevelAllocMap := unpackPCharString(loggingLevel)
	C.kuzu_database_set_logging_level(cloggingLevel)
	runtime.KeepAlive(loggingLevel)
	runtime.KeepAlive(cloggingLevelAllocMap)
}

// DefaultSystemConfig function as declared in include/kuzu.h:333
func DefaultSystemConfig() SystemConfig {
	__ret := C.kuzu_default_system_config()
	__v := *NewSystemConfigRef(unsafe.Pointer(&__ret))
	return __v
}

// ConnectionInit function as declared in include/kuzu.h:342
func ConnectionInit(database *Database) *Connection {
	cdatabase, cdatabaseAllocMap := database.PassRef()
	__ret := C.kuzu_connection_init(cdatabase)
	runtime.KeepAlive(cdatabaseAllocMap)
	__v := NewConnectionRef(unsafe.Pointer(__ret))
	return __v
}

// ConnectionDestroy function as declared in include/kuzu.h:347
func ConnectionDestroy(connection *Connection) {
	cconnection, cconnectionAllocMap := connection.PassRef()
	C.kuzu_connection_destroy(cconnection)
	runtime.KeepAlive(cconnectionAllocMap)
}

// ConnectionSetMaxNumThreadForExec function as declared in include/kuzu.h:353
func ConnectionSetMaxNumThreadForExec(connection *Connection, numThreads uint64) {
	cconnection, cconnectionAllocMap := connection.PassRef()
	cnumThreads, cnumThreadsAllocMap := (C.uint64_t)(numThreads), cgoAllocsUnknown
	C.kuzu_connection_set_max_num_thread_for_exec(cconnection, cnumThreads)
	runtime.KeepAlive(cnumThreadsAllocMap)
	runtime.KeepAlive(cconnectionAllocMap)
}

// ConnectionGetMaxNumThreadForExec function as declared in include/kuzu.h:360
func ConnectionGetMaxNumThreadForExec(connection *Connection) uint64 {
	cconnection, cconnectionAllocMap := connection.PassRef()
	__ret := C.kuzu_connection_get_max_num_thread_for_exec(cconnection)
	runtime.KeepAlive(cconnectionAllocMap)
	__v := (uint64)(__ret)
	return __v
}

// ConnectionQuery function as declared in include/kuzu.h:367
func ConnectionQuery(connection *Connection, query string) *QueryResult {
	cconnection, cconnectionAllocMap := connection.PassRef()
	query = safeString(query)
	cquery, cqueryAllocMap := unpackPCharString(query)
	__ret := C.kuzu_connection_query(cconnection, cquery)
	runtime.KeepAlive(query)
	runtime.KeepAlive(cqueryAllocMap)
	runtime.KeepAlive(cconnectionAllocMap)
	__v := NewQueryResultRef(unsafe.Pointer(__ret))
	return __v
}

// ConnectionPrepare function as declared in include/kuzu.h:373
func ConnectionPrepare(connection *Connection, query string) *PreparedStatement {
	cconnection, cconnectionAllocMap := connection.PassRef()
	query = safeString(query)
	cquery, cqueryAllocMap := unpackPCharString(query)
	__ret := C.kuzu_connection_prepare(cconnection, cquery)
	runtime.KeepAlive(query)
	runtime.KeepAlive(cqueryAllocMap)
	runtime.KeepAlive(cconnectionAllocMap)
	__v := NewPreparedStatementRef(unsafe.Pointer(__ret))
	return __v
}

// ConnectionExecute function as declared in include/kuzu.h:380
func ConnectionExecute(connection *Connection, preparedStatement *PreparedStatement) *QueryResult {
	cconnection, cconnectionAllocMap := connection.PassRef()
	cpreparedStatement, cpreparedStatementAllocMap := preparedStatement.PassRef()
	__ret := C.kuzu_connection_execute(cconnection, cpreparedStatement)
	runtime.KeepAlive(cpreparedStatementAllocMap)
	runtime.KeepAlive(cconnectionAllocMap)
	__v := NewQueryResultRef(unsafe.Pointer(__ret))
	return __v
}

// ConnectionInterrupt function as declared in include/kuzu.h:386
func ConnectionInterrupt(connection *Connection) {
	cconnection, cconnectionAllocMap := connection.PassRef()
	C.kuzu_connection_interrupt(cconnection)
	runtime.KeepAlive(cconnectionAllocMap)
}

// ConnectionSetQueryTimeout function as declared in include/kuzu.h:392
func ConnectionSetQueryTimeout(connection *Connection, timeoutInMs uint64) {
	cconnection, cconnectionAllocMap := connection.PassRef()
	ctimeoutInMs, ctimeoutInMsAllocMap := (C.uint64_t)(timeoutInMs), cgoAllocsUnknown
	C.kuzu_connection_set_query_timeout(cconnection, ctimeoutInMs)
	runtime.KeepAlive(ctimeoutInMsAllocMap)
	runtime.KeepAlive(cconnectionAllocMap)
}

// PreparedStatementDestroy function as declared in include/kuzu.h:400
func PreparedStatementDestroy(preparedStatement *PreparedStatement) {
	cpreparedStatement, cpreparedStatementAllocMap := preparedStatement.PassRef()
	C.kuzu_prepared_statement_destroy(cpreparedStatement)
	runtime.KeepAlive(cpreparedStatementAllocMap)
}

// PreparedStatementAllowActiveTransaction function as declared in include/kuzu.h:406
func PreparedStatementAllowActiveTransaction(preparedStatement *PreparedStatement) bool {
	cpreparedStatement, cpreparedStatementAllocMap := preparedStatement.PassRef()
	__ret := C.kuzu_prepared_statement_allow_active_transaction(cpreparedStatement)
	runtime.KeepAlive(cpreparedStatementAllocMap)
	__v := (bool)(__ret)
	return __v
}

// PreparedStatementIsSuccess function as declared in include/kuzu.h:411
func PreparedStatementIsSuccess(preparedStatement *PreparedStatement) bool {
	cpreparedStatement, cpreparedStatementAllocMap := preparedStatement.PassRef()
	__ret := C.kuzu_prepared_statement_is_success(cpreparedStatement)
	runtime.KeepAlive(cpreparedStatementAllocMap)
	__v := (bool)(__ret)
	return __v
}

// PreparedStatementGetErrorMessage function as declared in include/kuzu.h:415
func PreparedStatementGetErrorMessage(preparedStatement *PreparedStatement) *byte {
	cpreparedStatement, cpreparedStatementAllocMap := preparedStatement.PassRef()
	__ret := C.kuzu_prepared_statement_get_error_message(cpreparedStatement)
	runtime.KeepAlive(cpreparedStatementAllocMap)
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// PreparedStatementBindBool function as declared in include/kuzu.h:423
func PreparedStatementBindBool(preparedStatement *PreparedStatement, paramName string, value bool) {
	cpreparedStatement, cpreparedStatementAllocMap := preparedStatement.PassRef()
	paramName = safeString(paramName)
	cparamName, cparamNameAllocMap := unpackPCharString(paramName)
	cvalue, cvalueAllocMap := (C._Bool)(value), cgoAllocsUnknown
	C.kuzu_prepared_statement_bind_bool(cpreparedStatement, cparamName, cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(paramName)
	runtime.KeepAlive(cparamNameAllocMap)
	runtime.KeepAlive(cpreparedStatementAllocMap)
}

// PreparedStatementBindInt64 function as declared in include/kuzu.h:431
func PreparedStatementBindInt64(preparedStatement *PreparedStatement, paramName string, value int64) {
	cpreparedStatement, cpreparedStatementAllocMap := preparedStatement.PassRef()
	paramName = safeString(paramName)
	cparamName, cparamNameAllocMap := unpackPCharString(paramName)
	cvalue, cvalueAllocMap := (C.int64_t)(value), cgoAllocsUnknown
	C.kuzu_prepared_statement_bind_int64(cpreparedStatement, cparamName, cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(paramName)
	runtime.KeepAlive(cparamNameAllocMap)
	runtime.KeepAlive(cpreparedStatementAllocMap)
}

// PreparedStatementBindInt32 function as declared in include/kuzu.h:439
func PreparedStatementBindInt32(preparedStatement *PreparedStatement, paramName string, value int32) {
	cpreparedStatement, cpreparedStatementAllocMap := preparedStatement.PassRef()
	paramName = safeString(paramName)
	cparamName, cparamNameAllocMap := unpackPCharString(paramName)
	cvalue, cvalueAllocMap := (C.int32_t)(value), cgoAllocsUnknown
	C.kuzu_prepared_statement_bind_int32(cpreparedStatement, cparamName, cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(paramName)
	runtime.KeepAlive(cparamNameAllocMap)
	runtime.KeepAlive(cpreparedStatementAllocMap)
}

// PreparedStatementBindInt16 function as declared in include/kuzu.h:447
func PreparedStatementBindInt16(preparedStatement *PreparedStatement, paramName string, value int16) {
	cpreparedStatement, cpreparedStatementAllocMap := preparedStatement.PassRef()
	paramName = safeString(paramName)
	cparamName, cparamNameAllocMap := unpackPCharString(paramName)
	cvalue, cvalueAllocMap := (C.int16_t)(value), cgoAllocsUnknown
	C.kuzu_prepared_statement_bind_int16(cpreparedStatement, cparamName, cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(paramName)
	runtime.KeepAlive(cparamNameAllocMap)
	runtime.KeepAlive(cpreparedStatementAllocMap)
}

// PreparedStatementBindInt8 function as declared in include/kuzu.h:455
func PreparedStatementBindInt8(preparedStatement *PreparedStatement, paramName string, value int8) {
	cpreparedStatement, cpreparedStatementAllocMap := preparedStatement.PassRef()
	paramName = safeString(paramName)
	cparamName, cparamNameAllocMap := unpackPCharString(paramName)
	cvalue, cvalueAllocMap := (C.int8_t)(value), cgoAllocsUnknown
	C.kuzu_prepared_statement_bind_int8(cpreparedStatement, cparamName, cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(paramName)
	runtime.KeepAlive(cparamNameAllocMap)
	runtime.KeepAlive(cpreparedStatementAllocMap)
}

// PreparedStatementBindUint64 function as declared in include/kuzu.h:463
func PreparedStatementBindUint64(preparedStatement *PreparedStatement, paramName string, value uint64) {
	cpreparedStatement, cpreparedStatementAllocMap := preparedStatement.PassRef()
	paramName = safeString(paramName)
	cparamName, cparamNameAllocMap := unpackPCharString(paramName)
	cvalue, cvalueAllocMap := (C.uint64_t)(value), cgoAllocsUnknown
	C.kuzu_prepared_statement_bind_uint64(cpreparedStatement, cparamName, cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(paramName)
	runtime.KeepAlive(cparamNameAllocMap)
	runtime.KeepAlive(cpreparedStatementAllocMap)
}

// PreparedStatementBindUint32 function as declared in include/kuzu.h:471
func PreparedStatementBindUint32(preparedStatement *PreparedStatement, paramName string, value uint32) {
	cpreparedStatement, cpreparedStatementAllocMap := preparedStatement.PassRef()
	paramName = safeString(paramName)
	cparamName, cparamNameAllocMap := unpackPCharString(paramName)
	cvalue, cvalueAllocMap := (C.uint32_t)(value), cgoAllocsUnknown
	C.kuzu_prepared_statement_bind_uint32(cpreparedStatement, cparamName, cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(paramName)
	runtime.KeepAlive(cparamNameAllocMap)
	runtime.KeepAlive(cpreparedStatementAllocMap)
}

// PreparedStatementBindUint16 function as declared in include/kuzu.h:479
func PreparedStatementBindUint16(preparedStatement *PreparedStatement, paramName string, value uint16) {
	cpreparedStatement, cpreparedStatementAllocMap := preparedStatement.PassRef()
	paramName = safeString(paramName)
	cparamName, cparamNameAllocMap := unpackPCharString(paramName)
	cvalue, cvalueAllocMap := (C.uint16_t)(value), cgoAllocsUnknown
	C.kuzu_prepared_statement_bind_uint16(cpreparedStatement, cparamName, cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(paramName)
	runtime.KeepAlive(cparamNameAllocMap)
	runtime.KeepAlive(cpreparedStatementAllocMap)
}

// PreparedStatementBindUint8 function as declared in include/kuzu.h:487
func PreparedStatementBindUint8(preparedStatement *PreparedStatement, paramName string, value byte) {
	cpreparedStatement, cpreparedStatementAllocMap := preparedStatement.PassRef()
	paramName = safeString(paramName)
	cparamName, cparamNameAllocMap := unpackPCharString(paramName)
	cvalue, cvalueAllocMap := (C.uint8_t)(value), cgoAllocsUnknown
	C.kuzu_prepared_statement_bind_uint8(cpreparedStatement, cparamName, cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(paramName)
	runtime.KeepAlive(cparamNameAllocMap)
	runtime.KeepAlive(cpreparedStatementAllocMap)
}

// PreparedStatementBindDouble function as declared in include/kuzu.h:496
func PreparedStatementBindDouble(preparedStatement *PreparedStatement, paramName string, value float64) {
	cpreparedStatement, cpreparedStatementAllocMap := preparedStatement.PassRef()
	paramName = safeString(paramName)
	cparamName, cparamNameAllocMap := unpackPCharString(paramName)
	cvalue, cvalueAllocMap := (C.double)(value), cgoAllocsUnknown
	C.kuzu_prepared_statement_bind_double(cpreparedStatement, cparamName, cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(paramName)
	runtime.KeepAlive(cparamNameAllocMap)
	runtime.KeepAlive(cpreparedStatementAllocMap)
}

// PreparedStatementBindFloat function as declared in include/kuzu.h:504
func PreparedStatementBindFloat(preparedStatement *PreparedStatement, paramName string, value float32) {
	cpreparedStatement, cpreparedStatementAllocMap := preparedStatement.PassRef()
	paramName = safeString(paramName)
	cparamName, cparamNameAllocMap := unpackPCharString(paramName)
	cvalue, cvalueAllocMap := (C.float)(value), cgoAllocsUnknown
	C.kuzu_prepared_statement_bind_float(cpreparedStatement, cparamName, cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(paramName)
	runtime.KeepAlive(cparamNameAllocMap)
	runtime.KeepAlive(cpreparedStatementAllocMap)
}

// PreparedStatementBindDate function as declared in include/kuzu.h:512
func PreparedStatementBindDate(preparedStatement *PreparedStatement, paramName string, value DateT) {
	cpreparedStatement, cpreparedStatementAllocMap := preparedStatement.PassRef()
	paramName = safeString(paramName)
	cparamName, cparamNameAllocMap := unpackPCharString(paramName)
	cvalue, cvalueAllocMap := value.PassValue()
	C.kuzu_prepared_statement_bind_date(cpreparedStatement, cparamName, cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(paramName)
	runtime.KeepAlive(cparamNameAllocMap)
	runtime.KeepAlive(cpreparedStatementAllocMap)
}

// PreparedStatementBindTimestampNs function as declared in include/kuzu.h:520
func PreparedStatementBindTimestampNs(preparedStatement *PreparedStatement, paramName string, value TimestampNsT) {
	cpreparedStatement, cpreparedStatementAllocMap := preparedStatement.PassRef()
	paramName = safeString(paramName)
	cparamName, cparamNameAllocMap := unpackPCharString(paramName)
	cvalue, cvalueAllocMap := value.PassValue()
	C.kuzu_prepared_statement_bind_timestamp_ns(cpreparedStatement, cparamName, cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(paramName)
	runtime.KeepAlive(cparamNameAllocMap)
	runtime.KeepAlive(cpreparedStatementAllocMap)
}

// PreparedStatementBindTimestampSec function as declared in include/kuzu.h:528
func PreparedStatementBindTimestampSec(preparedStatement *PreparedStatement, paramName string, value TimestampSecT) {
	cpreparedStatement, cpreparedStatementAllocMap := preparedStatement.PassRef()
	paramName = safeString(paramName)
	cparamName, cparamNameAllocMap := unpackPCharString(paramName)
	cvalue, cvalueAllocMap := value.PassValue()
	C.kuzu_prepared_statement_bind_timestamp_sec(cpreparedStatement, cparamName, cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(paramName)
	runtime.KeepAlive(cparamNameAllocMap)
	runtime.KeepAlive(cpreparedStatementAllocMap)
}

// PreparedStatementBindTimestampTz function as declared in include/kuzu.h:537
func PreparedStatementBindTimestampTz(preparedStatement *PreparedStatement, paramName string, value TimestampTzT) {
	cpreparedStatement, cpreparedStatementAllocMap := preparedStatement.PassRef()
	paramName = safeString(paramName)
	cparamName, cparamNameAllocMap := unpackPCharString(paramName)
	cvalue, cvalueAllocMap := value.PassValue()
	C.kuzu_prepared_statement_bind_timestamp_tz(cpreparedStatement, cparamName, cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(paramName)
	runtime.KeepAlive(cparamNameAllocMap)
	runtime.KeepAlive(cpreparedStatementAllocMap)
}

// PreparedStatementBindTimestampMs function as declared in include/kuzu.h:545
func PreparedStatementBindTimestampMs(preparedStatement *PreparedStatement, paramName string, value TimestampMsT) {
	cpreparedStatement, cpreparedStatementAllocMap := preparedStatement.PassRef()
	paramName = safeString(paramName)
	cparamName, cparamNameAllocMap := unpackPCharString(paramName)
	cvalue, cvalueAllocMap := value.PassValue()
	C.kuzu_prepared_statement_bind_timestamp_ms(cpreparedStatement, cparamName, cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(paramName)
	runtime.KeepAlive(cparamNameAllocMap)
	runtime.KeepAlive(cpreparedStatementAllocMap)
}

// PreparedStatementBindTimestamp function as declared in include/kuzu.h:553
func PreparedStatementBindTimestamp(preparedStatement *PreparedStatement, paramName string, value TimestampT) {
	cpreparedStatement, cpreparedStatementAllocMap := preparedStatement.PassRef()
	paramName = safeString(paramName)
	cparamName, cparamNameAllocMap := unpackPCharString(paramName)
	cvalue, cvalueAllocMap := value.PassValue()
	C.kuzu_prepared_statement_bind_timestamp(cpreparedStatement, cparamName, cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(paramName)
	runtime.KeepAlive(cparamNameAllocMap)
	runtime.KeepAlive(cpreparedStatementAllocMap)
}

// PreparedStatementBindInterval function as declared in include/kuzu.h:561
func PreparedStatementBindInterval(preparedStatement *PreparedStatement, paramName string, value IntervalT) {
	cpreparedStatement, cpreparedStatementAllocMap := preparedStatement.PassRef()
	paramName = safeString(paramName)
	cparamName, cparamNameAllocMap := unpackPCharString(paramName)
	cvalue, cvalueAllocMap := value.PassValue()
	C.kuzu_prepared_statement_bind_interval(cpreparedStatement, cparamName, cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(paramName)
	runtime.KeepAlive(cparamNameAllocMap)
	runtime.KeepAlive(cpreparedStatementAllocMap)
}

// PreparedStatementBindString function as declared in include/kuzu.h:569
func PreparedStatementBindString(preparedStatement *PreparedStatement, paramName string, value string) {
	cpreparedStatement, cpreparedStatementAllocMap := preparedStatement.PassRef()
	paramName = safeString(paramName)
	cparamName, cparamNameAllocMap := unpackPCharString(paramName)
	value = safeString(value)
	cvalue, cvalueAllocMap := unpackPCharString(value)
	C.kuzu_prepared_statement_bind_string(cpreparedStatement, cparamName, cvalue)
	runtime.KeepAlive(value)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(paramName)
	runtime.KeepAlive(cparamNameAllocMap)
	runtime.KeepAlive(cpreparedStatementAllocMap)
}

// PreparedStatementBindValue function as declared in include/kuzu.h:577
func PreparedStatementBindValue(preparedStatement *PreparedStatement, paramName string, value *Value) {
	cpreparedStatement, cpreparedStatementAllocMap := preparedStatement.PassRef()
	paramName = safeString(paramName)
	cparamName, cparamNameAllocMap := unpackPCharString(paramName)
	cvalue, cvalueAllocMap := value.PassRef()
	C.kuzu_prepared_statement_bind_value(cpreparedStatement, cparamName, cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(paramName)
	runtime.KeepAlive(cparamNameAllocMap)
	runtime.KeepAlive(cpreparedStatementAllocMap)
}

// QueryResultDestroy function as declared in include/kuzu.h:585
func QueryResultDestroy(queryResult *QueryResult) {
	cqueryResult, cqueryResultAllocMap := queryResult.PassRef()
	C.kuzu_query_result_destroy(cqueryResult)
	runtime.KeepAlive(cqueryResultAllocMap)
}

// QueryResultIsSuccess function as declared in include/kuzu.h:590
func QueryResultIsSuccess(queryResult *QueryResult) bool {
	cqueryResult, cqueryResultAllocMap := queryResult.PassRef()
	__ret := C.kuzu_query_result_is_success(cqueryResult)
	runtime.KeepAlive(cqueryResultAllocMap)
	__v := (bool)(__ret)
	return __v
}

// QueryResultGetErrorMessage function as declared in include/kuzu.h:595
func QueryResultGetErrorMessage(queryResult *QueryResult) *byte {
	cqueryResult, cqueryResultAllocMap := queryResult.PassRef()
	__ret := C.kuzu_query_result_get_error_message(cqueryResult)
	runtime.KeepAlive(cqueryResultAllocMap)
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// QueryResultGetNumColumns function as declared in include/kuzu.h:600
func QueryResultGetNumColumns(queryResult *QueryResult) uint64 {
	cqueryResult, cqueryResultAllocMap := queryResult.PassRef()
	__ret := C.kuzu_query_result_get_num_columns(cqueryResult)
	runtime.KeepAlive(cqueryResultAllocMap)
	__v := (uint64)(__ret)
	return __v
}

// QueryResultGetColumnName function as declared in include/kuzu.h:606
func QueryResultGetColumnName(queryResult *QueryResult, index uint64) *byte {
	cqueryResult, cqueryResultAllocMap := queryResult.PassRef()
	cindex, cindexAllocMap := (C.uint64_t)(index), cgoAllocsUnknown
	__ret := C.kuzu_query_result_get_column_name(cqueryResult, cindex)
	runtime.KeepAlive(cindexAllocMap)
	runtime.KeepAlive(cqueryResultAllocMap)
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// QueryResultGetColumnDataType function as declared in include/kuzu.h:612
func QueryResultGetColumnDataType(queryResult *QueryResult, index uint64) *LogicalType {
	cqueryResult, cqueryResultAllocMap := queryResult.PassRef()
	cindex, cindexAllocMap := (C.uint64_t)(index), cgoAllocsUnknown
	__ret := C.kuzu_query_result_get_column_data_type(cqueryResult, cindex)
	runtime.KeepAlive(cindexAllocMap)
	runtime.KeepAlive(cqueryResultAllocMap)
	__v := NewLogicalTypeRef(unsafe.Pointer(__ret))
	return __v
}

// QueryResultGetNumTuples function as declared in include/kuzu.h:618
func QueryResultGetNumTuples(queryResult *QueryResult) uint64 {
	cqueryResult, cqueryResultAllocMap := queryResult.PassRef()
	__ret := C.kuzu_query_result_get_num_tuples(cqueryResult)
	runtime.KeepAlive(cqueryResultAllocMap)
	__v := (uint64)(__ret)
	return __v
}

// QueryResultGetQuerySummary function as declared in include/kuzu.h:623
func QueryResultGetQuerySummary(queryResult *QueryResult) *QuerySummary {
	cqueryResult, cqueryResultAllocMap := queryResult.PassRef()
	__ret := C.kuzu_query_result_get_query_summary(cqueryResult)
	runtime.KeepAlive(cqueryResultAllocMap)
	__v := NewQuerySummaryRef(unsafe.Pointer(__ret))
	return __v
}

// QueryResultHasNext function as declared in include/kuzu.h:628
func QueryResultHasNext(queryResult *QueryResult) bool {
	cqueryResult, cqueryResultAllocMap := queryResult.PassRef()
	__ret := C.kuzu_query_result_has_next(cqueryResult)
	runtime.KeepAlive(cqueryResultAllocMap)
	__v := (bool)(__ret)
	return __v
}

// QueryResultGetNext function as declared in include/kuzu.h:633
func QueryResultGetNext(queryResult *QueryResult) *FlatTuple {
	cqueryResult, cqueryResultAllocMap := queryResult.PassRef()
	__ret := C.kuzu_query_result_get_next(cqueryResult)
	runtime.KeepAlive(cqueryResultAllocMap)
	__v := NewFlatTupleRef(unsafe.Pointer(__ret))
	return __v
}

// QueryResultHasNextQueryResult function as declared in include/kuzu.h:639
func QueryResultHasNextQueryResult(queryResult *QueryResult) bool {
	cqueryResult, cqueryResultAllocMap := queryResult.PassRef()
	__ret := C.kuzu_query_result_has_next_query_result(cqueryResult)
	runtime.KeepAlive(cqueryResultAllocMap)
	__v := (bool)(__ret)
	return __v
}

// QueryResultGetNextQueryResult function as declared in include/kuzu.h:645
func QueryResultGetNextQueryResult(queryResult *QueryResult) *QueryResult {
	cqueryResult, cqueryResultAllocMap := queryResult.PassRef()
	__ret := C.kuzu_query_result_get_next_query_result(cqueryResult)
	runtime.KeepAlive(cqueryResultAllocMap)
	__v := NewQueryResultRef(unsafe.Pointer(__ret))
	return __v
}

// QueryResultToString function as declared in include/kuzu.h:652
func QueryResultToString(queryResult *QueryResult) *byte {
	cqueryResult, cqueryResultAllocMap := queryResult.PassRef()
	__ret := C.kuzu_query_result_to_string(cqueryResult)
	runtime.KeepAlive(cqueryResultAllocMap)
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// QueryResultResetIterator function as declared in include/kuzu.h:657
func QueryResultResetIterator(queryResult *QueryResult) {
	cqueryResult, cqueryResultAllocMap := queryResult.PassRef()
	C.kuzu_query_result_reset_iterator(cqueryResult)
	runtime.KeepAlive(cqueryResultAllocMap)
}

// FlatTupleDestroy function as declared in include/kuzu.h:685
func FlatTupleDestroy(flatTuple *FlatTuple) {
	cflatTuple, cflatTupleAllocMap := flatTuple.PassRef()
	C.kuzu_flat_tuple_destroy(cflatTuple)
	runtime.KeepAlive(cflatTupleAllocMap)
}

// FlatTupleGetValue function as declared in include/kuzu.h:691
func FlatTupleGetValue(flatTuple *FlatTuple, index uint64) *Value {
	cflatTuple, cflatTupleAllocMap := flatTuple.PassRef()
	cindex, cindexAllocMap := (C.uint64_t)(index), cgoAllocsUnknown
	__ret := C.kuzu_flat_tuple_get_value(cflatTuple, cindex)
	runtime.KeepAlive(cindexAllocMap)
	runtime.KeepAlive(cflatTupleAllocMap)
	__v := NewValueRef(unsafe.Pointer(__ret))
	return __v
}

// FlatTupleToString function as declared in include/kuzu.h:696
func FlatTupleToString(flatTuple *FlatTuple) *byte {
	cflatTuple, cflatTupleAllocMap := flatTuple.PassRef()
	__ret := C.kuzu_flat_tuple_to_string(cflatTuple)
	runtime.KeepAlive(cflatTupleAllocMap)
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// DataTypeCreate function as declared in include/kuzu.h:707
func DataTypeCreate(id DataTypeId, childType *LogicalType, numElementsInArray uint64) *LogicalType {
	cid, cidAllocMap := (C.kuzu_data_type_id)(id), cgoAllocsUnknown
	cchildType, cchildTypeAllocMap := childType.PassRef()
	cnumElementsInArray, cnumElementsInArrayAllocMap := (C.uint64_t)(numElementsInArray), cgoAllocsUnknown
	__ret := C.kuzu_data_type_create(cid, cchildType, cnumElementsInArray)
	runtime.KeepAlive(cnumElementsInArrayAllocMap)
	runtime.KeepAlive(cchildTypeAllocMap)
	runtime.KeepAlive(cidAllocMap)
	__v := NewLogicalTypeRef(unsafe.Pointer(__ret))
	return __v
}

// DataTypeClone function as declared in include/kuzu.h:713
func DataTypeClone(dataType *LogicalType) *LogicalType {
	cdataType, cdataTypeAllocMap := dataType.PassRef()
	__ret := C.kuzu_data_type_clone(cdataType)
	runtime.KeepAlive(cdataTypeAllocMap)
	__v := NewLogicalTypeRef(unsafe.Pointer(__ret))
	return __v
}

// DataTypeDestroy function as declared in include/kuzu.h:718
func DataTypeDestroy(dataType *LogicalType) {
	cdataType, cdataTypeAllocMap := dataType.PassRef()
	C.kuzu_data_type_destroy(cdataType)
	runtime.KeepAlive(cdataTypeAllocMap)
}

// DataTypeEquals function as declared in include/kuzu.h:724
func DataTypeEquals(dataType1 *LogicalType, dataType2 *LogicalType) bool {
	cdataType1, cdataType1AllocMap := dataType1.PassRef()
	cdataType2, cdataType2AllocMap := dataType2.PassRef()
	__ret := C.kuzu_data_type_equals(cdataType1, cdataType2)
	runtime.KeepAlive(cdataType2AllocMap)
	runtime.KeepAlive(cdataType1AllocMap)
	__v := (bool)(__ret)
	return __v
}

// DataTypeGetId function as declared in include/kuzu.h:729
func DataTypeGetId(dataType *LogicalType) DataTypeId {
	cdataType, cdataTypeAllocMap := dataType.PassRef()
	__ret := C.kuzu_data_type_get_id(cdataType)
	runtime.KeepAlive(cdataTypeAllocMap)
	__v := (DataTypeId)(__ret)
	return __v
}

// DataTypeGetNumElementsInArray function as declared in include/kuzu.h:734
func DataTypeGetNumElementsInArray(dataType *LogicalType) uint64 {
	cdataType, cdataTypeAllocMap := dataType.PassRef()
	__ret := C.kuzu_data_type_get_num_elements_in_array(cdataType)
	runtime.KeepAlive(cdataTypeAllocMap)
	__v := (uint64)(__ret)
	return __v
}

// ValueCreateNull function as declared in include/kuzu.h:740
func ValueCreateNull() *Value {
	__ret := C.kuzu_value_create_null()
	__v := NewValueRef(unsafe.Pointer(__ret))
	return __v
}

// ValueCreateNullWithDataType function as declared in include/kuzu.h:746
func ValueCreateNullWithDataType(dataType *LogicalType) *Value {
	cdataType, cdataTypeAllocMap := dataType.PassRef()
	__ret := C.kuzu_value_create_null_with_data_type(cdataType)
	runtime.KeepAlive(cdataTypeAllocMap)
	__v := NewValueRef(unsafe.Pointer(__ret))
	return __v
}

// ValueIsNull function as declared in include/kuzu.h:751
func ValueIsNull(value *Value) bool {
	cvalue, cvalueAllocMap := value.PassRef()
	__ret := C.kuzu_value_is_null(cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	__v := (bool)(__ret)
	return __v
}

// ValueSetNull function as declared in include/kuzu.h:757
func ValueSetNull(value *Value, isNull bool) {
	cvalue, cvalueAllocMap := value.PassRef()
	cisNull, cisNullAllocMap := (C._Bool)(isNull), cgoAllocsUnknown
	C.kuzu_value_set_null(cvalue, cisNull)
	runtime.KeepAlive(cisNullAllocMap)
	runtime.KeepAlive(cvalueAllocMap)
}

// ValueCreateDefault function as declared in include/kuzu.h:763
func ValueCreateDefault(dataType *LogicalType) *Value {
	cdataType, cdataTypeAllocMap := dataType.PassRef()
	__ret := C.kuzu_value_create_default(cdataType)
	runtime.KeepAlive(cdataTypeAllocMap)
	__v := NewValueRef(unsafe.Pointer(__ret))
	return __v
}

// ValueCreateBool function as declared in include/kuzu.h:769
func ValueCreateBool(val_ bool) *Value {
	cval_, cval_AllocMap := (C._Bool)(val_), cgoAllocsUnknown
	__ret := C.kuzu_value_create_bool(cval_)
	runtime.KeepAlive(cval_AllocMap)
	__v := NewValueRef(unsafe.Pointer(__ret))
	return __v
}

// ValueCreateInt8 function as declared in include/kuzu.h:775
func ValueCreateInt8(val_ int8) *Value {
	cval_, cval_AllocMap := (C.int8_t)(val_), cgoAllocsUnknown
	__ret := C.kuzu_value_create_int8(cval_)
	runtime.KeepAlive(cval_AllocMap)
	__v := NewValueRef(unsafe.Pointer(__ret))
	return __v
}

// ValueCreateInt16 function as declared in include/kuzu.h:781
func ValueCreateInt16(val_ int16) *Value {
	cval_, cval_AllocMap := (C.int16_t)(val_), cgoAllocsUnknown
	__ret := C.kuzu_value_create_int16(cval_)
	runtime.KeepAlive(cval_AllocMap)
	__v := NewValueRef(unsafe.Pointer(__ret))
	return __v
}

// ValueCreateInt32 function as declared in include/kuzu.h:787
func ValueCreateInt32(val_ int32) *Value {
	cval_, cval_AllocMap := (C.int32_t)(val_), cgoAllocsUnknown
	__ret := C.kuzu_value_create_int32(cval_)
	runtime.KeepAlive(cval_AllocMap)
	__v := NewValueRef(unsafe.Pointer(__ret))
	return __v
}

// ValueCreateInt64 function as declared in include/kuzu.h:793
func ValueCreateInt64(val_ int64) *Value {
	cval_, cval_AllocMap := (C.int64_t)(val_), cgoAllocsUnknown
	__ret := C.kuzu_value_create_int64(cval_)
	runtime.KeepAlive(cval_AllocMap)
	__v := NewValueRef(unsafe.Pointer(__ret))
	return __v
}

// ValueCreateUint8 function as declared in include/kuzu.h:799
func ValueCreateUint8(val_ byte) *Value {
	cval_, cval_AllocMap := (C.uint8_t)(val_), cgoAllocsUnknown
	__ret := C.kuzu_value_create_uint8(cval_)
	runtime.KeepAlive(cval_AllocMap)
	__v := NewValueRef(unsafe.Pointer(__ret))
	return __v
}

// ValueCreateUint16 function as declared in include/kuzu.h:805
func ValueCreateUint16(val_ uint16) *Value {
	cval_, cval_AllocMap := (C.uint16_t)(val_), cgoAllocsUnknown
	__ret := C.kuzu_value_create_uint16(cval_)
	runtime.KeepAlive(cval_AllocMap)
	__v := NewValueRef(unsafe.Pointer(__ret))
	return __v
}

// ValueCreateUint32 function as declared in include/kuzu.h:811
func ValueCreateUint32(val_ uint32) *Value {
	cval_, cval_AllocMap := (C.uint32_t)(val_), cgoAllocsUnknown
	__ret := C.kuzu_value_create_uint32(cval_)
	runtime.KeepAlive(cval_AllocMap)
	__v := NewValueRef(unsafe.Pointer(__ret))
	return __v
}

// ValueCreateUint64 function as declared in include/kuzu.h:817
func ValueCreateUint64(val_ uint64) *Value {
	cval_, cval_AllocMap := (C.uint64_t)(val_), cgoAllocsUnknown
	__ret := C.kuzu_value_create_uint64(cval_)
	runtime.KeepAlive(cval_AllocMap)
	__v := NewValueRef(unsafe.Pointer(__ret))
	return __v
}

// ValueCreateInt128 function as declared in include/kuzu.h:823
func ValueCreateInt128(val_ Int128T) *Value {
	cval_, cval_AllocMap := val_.PassValue()
	__ret := C.kuzu_value_create_int128(cval_)
	runtime.KeepAlive(cval_AllocMap)
	__v := NewValueRef(unsafe.Pointer(__ret))
	return __v
}

// ValueCreateFloat function as declared in include/kuzu.h:829
func ValueCreateFloat(val_ float32) *Value {
	cval_, cval_AllocMap := (C.float)(val_), cgoAllocsUnknown
	__ret := C.kuzu_value_create_float(cval_)
	runtime.KeepAlive(cval_AllocMap)
	__v := NewValueRef(unsafe.Pointer(__ret))
	return __v
}

// ValueCreateDouble function as declared in include/kuzu.h:835
func ValueCreateDouble(val_ float64) *Value {
	cval_, cval_AllocMap := (C.double)(val_), cgoAllocsUnknown
	__ret := C.kuzu_value_create_double(cval_)
	runtime.KeepAlive(cval_AllocMap)
	__v := NewValueRef(unsafe.Pointer(__ret))
	return __v
}

// ValueCreateInternalId function as declared in include/kuzu.h:841
func ValueCreateInternalId(val_ InternalIdT) *Value {
	cval_, cval_AllocMap := val_.PassValue()
	__ret := C.kuzu_value_create_internal_id(cval_)
	runtime.KeepAlive(cval_AllocMap)
	__v := NewValueRef(unsafe.Pointer(__ret))
	return __v
}

// ValueCreateDate function as declared in include/kuzu.h:847
func ValueCreateDate(val_ DateT) *Value {
	cval_, cval_AllocMap := val_.PassValue()
	__ret := C.kuzu_value_create_date(cval_)
	runtime.KeepAlive(cval_AllocMap)
	__v := NewValueRef(unsafe.Pointer(__ret))
	return __v
}

// ValueCreateTimestampNs function as declared in include/kuzu.h:853
func ValueCreateTimestampNs(val_ TimestampNsT) *Value {
	cval_, cval_AllocMap := val_.PassValue()
	__ret := C.kuzu_value_create_timestamp_ns(cval_)
	runtime.KeepAlive(cval_AllocMap)
	__v := NewValueRef(unsafe.Pointer(__ret))
	return __v
}

// ValueCreateTimestampMs function as declared in include/kuzu.h:859
func ValueCreateTimestampMs(val_ TimestampMsT) *Value {
	cval_, cval_AllocMap := val_.PassValue()
	__ret := C.kuzu_value_create_timestamp_ms(cval_)
	runtime.KeepAlive(cval_AllocMap)
	__v := NewValueRef(unsafe.Pointer(__ret))
	return __v
}

// ValueCreateTimestampSec function as declared in include/kuzu.h:865
func ValueCreateTimestampSec(val_ TimestampSecT) *Value {
	cval_, cval_AllocMap := val_.PassValue()
	__ret := C.kuzu_value_create_timestamp_sec(cval_)
	runtime.KeepAlive(cval_AllocMap)
	__v := NewValueRef(unsafe.Pointer(__ret))
	return __v
}

// ValueCreateTimestampTz function as declared in include/kuzu.h:871
func ValueCreateTimestampTz(val_ TimestampTzT) *Value {
	cval_, cval_AllocMap := val_.PassValue()
	__ret := C.kuzu_value_create_timestamp_tz(cval_)
	runtime.KeepAlive(cval_AllocMap)
	__v := NewValueRef(unsafe.Pointer(__ret))
	return __v
}

// ValueCreateTimestamp function as declared in include/kuzu.h:877
func ValueCreateTimestamp(val_ TimestampT) *Value {
	cval_, cval_AllocMap := val_.PassValue()
	__ret := C.kuzu_value_create_timestamp(cval_)
	runtime.KeepAlive(cval_AllocMap)
	__v := NewValueRef(unsafe.Pointer(__ret))
	return __v
}

// ValueCreateInterval function as declared in include/kuzu.h:883
func ValueCreateInterval(val_ IntervalT) *Value {
	cval_, cval_AllocMap := val_.PassValue()
	__ret := C.kuzu_value_create_interval(cval_)
	runtime.KeepAlive(cval_AllocMap)
	__v := NewValueRef(unsafe.Pointer(__ret))
	return __v
}

// ValueCreateString function as declared in include/kuzu.h:889
func ValueCreateString(val_ string) *Value {
	val_ = safeString(val_)
	cval_, cval_AllocMap := unpackPCharString(val_)
	__ret := C.kuzu_value_create_string(cval_)
	runtime.KeepAlive(val_)
	runtime.KeepAlive(cval_AllocMap)
	__v := NewValueRef(unsafe.Pointer(__ret))
	return __v
}

// ValueClone function as declared in include/kuzu.h:895
func ValueClone(value *Value) *Value {
	cvalue, cvalueAllocMap := value.PassRef()
	__ret := C.kuzu_value_clone(cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	__v := NewValueRef(unsafe.Pointer(__ret))
	return __v
}

// ValueCopy function as declared in include/kuzu.h:901
func ValueCopy(value *Value, other *Value) {
	cvalue, cvalueAllocMap := value.PassRef()
	cother, cotherAllocMap := other.PassRef()
	C.kuzu_value_copy(cvalue, cother)
	runtime.KeepAlive(cotherAllocMap)
	runtime.KeepAlive(cvalueAllocMap)
}

// ValueDestroy function as declared in include/kuzu.h:906
func ValueDestroy(value *Value) {
	cvalue, cvalueAllocMap := value.PassRef()
	C.kuzu_value_destroy(cvalue)
	runtime.KeepAlive(cvalueAllocMap)
}

// ValueGetListSize function as declared in include/kuzu.h:912
func ValueGetListSize(value *Value) uint64 {
	cvalue, cvalueAllocMap := value.PassRef()
	__ret := C.kuzu_value_get_list_size(cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	__v := (uint64)(__ret)
	return __v
}

// ValueGetListElement function as declared in include/kuzu.h:918
func ValueGetListElement(value *Value, index uint64) *Value {
	cvalue, cvalueAllocMap := value.PassRef()
	cindex, cindexAllocMap := (C.uint64_t)(index), cgoAllocsUnknown
	__ret := C.kuzu_value_get_list_element(cvalue, cindex)
	runtime.KeepAlive(cindexAllocMap)
	runtime.KeepAlive(cvalueAllocMap)
	__v := NewValueRef(unsafe.Pointer(__ret))
	return __v
}

// ValueGetStructNumFields function as declared in include/kuzu.h:923
func ValueGetStructNumFields(value *Value) uint64 {
	cvalue, cvalueAllocMap := value.PassRef()
	__ret := C.kuzu_value_get_struct_num_fields(cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	__v := (uint64)(__ret)
	return __v
}

// ValueGetStructFieldName function as declared in include/kuzu.h:930
func ValueGetStructFieldName(value *Value, index uint64) *byte {
	cvalue, cvalueAllocMap := value.PassRef()
	cindex, cindexAllocMap := (C.uint64_t)(index), cgoAllocsUnknown
	__ret := C.kuzu_value_get_struct_field_name(cvalue, cindex)
	runtime.KeepAlive(cindexAllocMap)
	runtime.KeepAlive(cvalueAllocMap)
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// ValueGetStructFieldValue function as declared in include/kuzu.h:937
func ValueGetStructFieldValue(value *Value, index uint64) *Value {
	cvalue, cvalueAllocMap := value.PassRef()
	cindex, cindexAllocMap := (C.uint64_t)(index), cgoAllocsUnknown
	__ret := C.kuzu_value_get_struct_field_value(cvalue, cindex)
	runtime.KeepAlive(cindexAllocMap)
	runtime.KeepAlive(cvalueAllocMap)
	__v := NewValueRef(unsafe.Pointer(__ret))
	return __v
}

// ValueGetRecursiveRelNodeList function as declared in include/kuzu.h:942
func ValueGetRecursiveRelNodeList(value *Value) *Value {
	cvalue, cvalueAllocMap := value.PassRef()
	__ret := C.kuzu_value_get_recursive_rel_node_list(cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	__v := NewValueRef(unsafe.Pointer(__ret))
	return __v
}

// ValueGetRecursiveRelRelList function as declared in include/kuzu.h:947
func ValueGetRecursiveRelRelList(value *Value) *Value {
	cvalue, cvalueAllocMap := value.PassRef()
	__ret := C.kuzu_value_get_recursive_rel_rel_list(cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	__v := NewValueRef(unsafe.Pointer(__ret))
	return __v
}

// ValueGetDataType function as declared in include/kuzu.h:953
func ValueGetDataType(value *Value) *LogicalType {
	cvalue, cvalueAllocMap := value.PassRef()
	__ret := C.kuzu_value_get_data_type(cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	__v := NewLogicalTypeRef(unsafe.Pointer(__ret))
	return __v
}

// ValueGetBool function as declared in include/kuzu.h:958
func ValueGetBool(value *Value) bool {
	cvalue, cvalueAllocMap := value.PassRef()
	__ret := C.kuzu_value_get_bool(cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	__v := (bool)(__ret)
	return __v
}

// ValueGetInt8 function as declared in include/kuzu.h:964
func ValueGetInt8(value *Value) int8 {
	cvalue, cvalueAllocMap := value.PassRef()
	__ret := C.kuzu_value_get_int8(cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	__v := (int8)(__ret)
	return __v
}

// ValueGetInt16 function as declared in include/kuzu.h:969
func ValueGetInt16(value *Value) int16 {
	cvalue, cvalueAllocMap := value.PassRef()
	__ret := C.kuzu_value_get_int16(cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	__v := (int16)(__ret)
	return __v
}

// ValueGetInt32 function as declared in include/kuzu.h:974
func ValueGetInt32(value *Value) int32 {
	cvalue, cvalueAllocMap := value.PassRef()
	__ret := C.kuzu_value_get_int32(cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	__v := (int32)(__ret)
	return __v
}

// ValueGetInt64 function as declared in include/kuzu.h:979
func ValueGetInt64(value *Value) int64 {
	cvalue, cvalueAllocMap := value.PassRef()
	__ret := C.kuzu_value_get_int64(cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	__v := (int64)(__ret)
	return __v
}

// ValueGetUint8 function as declared in include/kuzu.h:984
func ValueGetUint8(value *Value) byte {
	cvalue, cvalueAllocMap := value.PassRef()
	__ret := C.kuzu_value_get_uint8(cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	__v := (byte)(__ret)
	return __v
}

// ValueGetUint16 function as declared in include/kuzu.h:989
func ValueGetUint16(value *Value) uint16 {
	cvalue, cvalueAllocMap := value.PassRef()
	__ret := C.kuzu_value_get_uint16(cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	__v := (uint16)(__ret)
	return __v
}

// ValueGetUint32 function as declared in include/kuzu.h:994
func ValueGetUint32(value *Value) uint32 {
	cvalue, cvalueAllocMap := value.PassRef()
	__ret := C.kuzu_value_get_uint32(cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	__v := (uint32)(__ret)
	return __v
}

// ValueGetUint64 function as declared in include/kuzu.h:999
func ValueGetUint64(value *Value) uint64 {
	cvalue, cvalueAllocMap := value.PassRef()
	__ret := C.kuzu_value_get_uint64(cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	__v := (uint64)(__ret)
	return __v
}

// ValueGetInt128 function as declared in include/kuzu.h:1004
func ValueGetInt128(value *Value) Int128T {
	cvalue, cvalueAllocMap := value.PassRef()
	__ret := C.kuzu_value_get_int128(cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	__v := *NewInt128TRef(unsafe.Pointer(&__ret))
	return __v
}

// Int128TFromString function as declared in include/kuzu.h:1008
func Int128TFromString(str string) Int128T {
	str = safeString(str)
	cstr, cstrAllocMap := unpackPCharString(str)
	__ret := C.kuzu_int128_t_from_string(cstr)
	runtime.KeepAlive(str)
	runtime.KeepAlive(cstrAllocMap)
	__v := *NewInt128TRef(unsafe.Pointer(&__ret))
	return __v
}

// Int128TToString function as declared in include/kuzu.h:1012
func Int128TToString(val Int128T) *byte {
	cval, cvalAllocMap := val.PassValue()
	__ret := C.kuzu_int128_t_to_string(cval)
	runtime.KeepAlive(cvalAllocMap)
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// ValueGetFloat function as declared in include/kuzu.h:1017
func ValueGetFloat(value *Value) float32 {
	cvalue, cvalueAllocMap := value.PassRef()
	__ret := C.kuzu_value_get_float(cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	__v := (float32)(__ret)
	return __v
}

// ValueGetDouble function as declared in include/kuzu.h:1022
func ValueGetDouble(value *Value) float64 {
	cvalue, cvalueAllocMap := value.PassRef()
	__ret := C.kuzu_value_get_double(cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	__v := (float64)(__ret)
	return __v
}

// ValueGetInternalId function as declared in include/kuzu.h:1027
func ValueGetInternalId(value *Value) InternalIdT {
	cvalue, cvalueAllocMap := value.PassRef()
	__ret := C.kuzu_value_get_internal_id(cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	__v := *NewInternalIdTRef(unsafe.Pointer(&__ret))
	return __v
}

// ValueGetDate function as declared in include/kuzu.h:1032
func ValueGetDate(value *Value) DateT {
	cvalue, cvalueAllocMap := value.PassRef()
	__ret := C.kuzu_value_get_date(cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	__v := *NewDateTRef(unsafe.Pointer(&__ret))
	return __v
}

// ValueGetTimestamp function as declared in include/kuzu.h:1037
func ValueGetTimestamp(value *Value) TimestampT {
	cvalue, cvalueAllocMap := value.PassRef()
	__ret := C.kuzu_value_get_timestamp(cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	__v := *NewTimestampTRef(unsafe.Pointer(&__ret))
	return __v
}

// ValueGetTimestampNs function as declared in include/kuzu.h:1042
func ValueGetTimestampNs(value *Value) TimestampNsT {
	cvalue, cvalueAllocMap := value.PassRef()
	__ret := C.kuzu_value_get_timestamp_ns(cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	__v := *NewTimestampNsTRef(unsafe.Pointer(&__ret))
	return __v
}

// ValueGetTimestampMs function as declared in include/kuzu.h:1047
func ValueGetTimestampMs(value *Value) TimestampMsT {
	cvalue, cvalueAllocMap := value.PassRef()
	__ret := C.kuzu_value_get_timestamp_ms(cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	__v := *NewTimestampMsTRef(unsafe.Pointer(&__ret))
	return __v
}

// ValueGetTimestampSec function as declared in include/kuzu.h:1053
func ValueGetTimestampSec(value *Value) TimestampSecT {
	cvalue, cvalueAllocMap := value.PassRef()
	__ret := C.kuzu_value_get_timestamp_sec(cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	__v := *NewTimestampSecTRef(unsafe.Pointer(&__ret))
	return __v
}

// ValueGetTimestampTz function as declared in include/kuzu.h:1058
func ValueGetTimestampTz(value *Value) TimestampTzT {
	cvalue, cvalueAllocMap := value.PassRef()
	__ret := C.kuzu_value_get_timestamp_tz(cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	__v := *NewTimestampTzTRef(unsafe.Pointer(&__ret))
	return __v
}

// ValueGetInterval function as declared in include/kuzu.h:1063
func ValueGetInterval(value *Value) IntervalT {
	cvalue, cvalueAllocMap := value.PassRef()
	__ret := C.kuzu_value_get_interval(cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	__v := *NewIntervalTRef(unsafe.Pointer(&__ret))
	return __v
}

// ValueGetString function as declared in include/kuzu.h:1068
func ValueGetString(value *Value) *byte {
	cvalue, cvalueAllocMap := value.PassRef()
	__ret := C.kuzu_value_get_string(cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// ValueGetBlob function as declared in include/kuzu.h:1074
func ValueGetBlob(value *Value) *byte {
	cvalue, cvalueAllocMap := value.PassRef()
	__ret := C.kuzu_value_get_blob(cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// ValueGetUuid function as declared in include/kuzu.h:1080
func ValueGetUuid(value *Value) *byte {
	cvalue, cvalueAllocMap := value.PassRef()
	__ret := C.kuzu_value_get_uuid(cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// ValueToString function as declared in include/kuzu.h:1085
func ValueToString(value *Value) *byte {
	cvalue, cvalueAllocMap := value.PassRef()
	__ret := C.kuzu_value_to_string(cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// NodeValGetIdVal function as declared in include/kuzu.h:1090
func NodeValGetIdVal(nodeVal *Value) *Value {
	cnodeVal, cnodeValAllocMap := nodeVal.PassRef()
	__ret := C.kuzu_node_val_get_id_val(cnodeVal)
	runtime.KeepAlive(cnodeValAllocMap)
	__v := NewValueRef(unsafe.Pointer(__ret))
	return __v
}

// NodeValGetLabelVal function as declared in include/kuzu.h:1095
func NodeValGetLabelVal(nodeVal *Value) *Value {
	cnodeVal, cnodeValAllocMap := nodeVal.PassRef()
	__ret := C.kuzu_node_val_get_label_val(cnodeVal)
	runtime.KeepAlive(cnodeValAllocMap)
	__v := NewValueRef(unsafe.Pointer(__ret))
	return __v
}

// NodeValGetPropertySize function as declared in include/kuzu.h:1100
func NodeValGetPropertySize(nodeVal *Value) uint64 {
	cnodeVal, cnodeValAllocMap := nodeVal.PassRef()
	__ret := C.kuzu_node_val_get_property_size(cnodeVal)
	runtime.KeepAlive(cnodeValAllocMap)
	__v := (uint64)(__ret)
	return __v
}

// NodeValGetPropertyNameAt function as declared in include/kuzu.h:1106
func NodeValGetPropertyNameAt(nodeVal *Value, index uint64) *byte {
	cnodeVal, cnodeValAllocMap := nodeVal.PassRef()
	cindex, cindexAllocMap := (C.uint64_t)(index), cgoAllocsUnknown
	__ret := C.kuzu_node_val_get_property_name_at(cnodeVal, cindex)
	runtime.KeepAlive(cindexAllocMap)
	runtime.KeepAlive(cnodeValAllocMap)
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// NodeValGetPropertyValueAt function as declared in include/kuzu.h:1112
func NodeValGetPropertyValueAt(nodeVal *Value, index uint64) *Value {
	cnodeVal, cnodeValAllocMap := nodeVal.PassRef()
	cindex, cindexAllocMap := (C.uint64_t)(index), cgoAllocsUnknown
	__ret := C.kuzu_node_val_get_property_value_at(cnodeVal, cindex)
	runtime.KeepAlive(cindexAllocMap)
	runtime.KeepAlive(cnodeValAllocMap)
	__v := NewValueRef(unsafe.Pointer(__ret))
	return __v
}

// NodeValToString function as declared in include/kuzu.h:1117
func NodeValToString(nodeVal *Value) *byte {
	cnodeVal, cnodeValAllocMap := nodeVal.PassRef()
	__ret := C.kuzu_node_val_to_string(cnodeVal)
	runtime.KeepAlive(cnodeValAllocMap)
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// RelValGetSrcIdVal function as declared in include/kuzu.h:1122
func RelValGetSrcIdVal(relVal *Value) *Value {
	crelVal, crelValAllocMap := relVal.PassRef()
	__ret := C.kuzu_rel_val_get_src_id_val(crelVal)
	runtime.KeepAlive(crelValAllocMap)
	__v := NewValueRef(unsafe.Pointer(__ret))
	return __v
}

// RelValGetDstIdVal function as declared in include/kuzu.h:1128
func RelValGetDstIdVal(relVal *Value) *Value {
	crelVal, crelValAllocMap := relVal.PassRef()
	__ret := C.kuzu_rel_val_get_dst_id_val(crelVal)
	runtime.KeepAlive(crelValAllocMap)
	__v := NewValueRef(unsafe.Pointer(__ret))
	return __v
}

// RelValGetLabelVal function as declared in include/kuzu.h:1133
func RelValGetLabelVal(relVal *Value) *Value {
	crelVal, crelValAllocMap := relVal.PassRef()
	__ret := C.kuzu_rel_val_get_label_val(crelVal)
	runtime.KeepAlive(crelValAllocMap)
	__v := NewValueRef(unsafe.Pointer(__ret))
	return __v
}

// RelValGetPropertySize function as declared in include/kuzu.h:1138
func RelValGetPropertySize(relVal *Value) uint64 {
	crelVal, crelValAllocMap := relVal.PassRef()
	__ret := C.kuzu_rel_val_get_property_size(crelVal)
	runtime.KeepAlive(crelValAllocMap)
	__v := (uint64)(__ret)
	return __v
}

// RelValGetPropertyNameAt function as declared in include/kuzu.h:1144
func RelValGetPropertyNameAt(relVal *Value, index uint64) *byte {
	crelVal, crelValAllocMap := relVal.PassRef()
	cindex, cindexAllocMap := (C.uint64_t)(index), cgoAllocsUnknown
	__ret := C.kuzu_rel_val_get_property_name_at(crelVal, cindex)
	runtime.KeepAlive(cindexAllocMap)
	runtime.KeepAlive(crelValAllocMap)
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// RelValGetPropertyValueAt function as declared in include/kuzu.h:1150
func RelValGetPropertyValueAt(relVal *Value, index uint64) *Value {
	crelVal, crelValAllocMap := relVal.PassRef()
	cindex, cindexAllocMap := (C.uint64_t)(index), cgoAllocsUnknown
	__ret := C.kuzu_rel_val_get_property_value_at(crelVal, cindex)
	runtime.KeepAlive(cindexAllocMap)
	runtime.KeepAlive(crelValAllocMap)
	__v := NewValueRef(unsafe.Pointer(__ret))
	return __v
}

// RelValToString function as declared in include/kuzu.h:1155
func RelValToString(relVal *Value) *byte {
	crelVal, crelValAllocMap := relVal.PassRef()
	__ret := C.kuzu_rel_val_to_string(crelVal)
	runtime.KeepAlive(crelValAllocMap)
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// RdfVariantGetType function as declared in include/kuzu.h:1161
func RdfVariantGetType(rdfVariant *Value) DataTypeId {
	crdfVariant, crdfVariantAllocMap := rdfVariant.PassRef()
	__ret := C.kuzu_rdf_variant_get_type(crdfVariant)
	runtime.KeepAlive(crdfVariantAllocMap)
	__v := (DataTypeId)(__ret)
	return __v
}

// RdfVariantGetString function as declared in include/kuzu.h:1167
func RdfVariantGetString(rdfVariant *Value) *byte {
	crdfVariant, crdfVariantAllocMap := rdfVariant.PassRef()
	__ret := C.kuzu_rdf_variant_get_string(crdfVariant)
	runtime.KeepAlive(crdfVariantAllocMap)
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// RdfVariantGetBlob function as declared in include/kuzu.h:1174
func RdfVariantGetBlob(rdfVariant *Value) *byte {
	crdfVariant, crdfVariantAllocMap := rdfVariant.PassRef()
	__ret := C.kuzu_rdf_variant_get_blob(crdfVariant)
	runtime.KeepAlive(crdfVariantAllocMap)
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// RdfVariantGetInt64 function as declared in include/kuzu.h:1180
func RdfVariantGetInt64(rdfVariant *Value) int64 {
	crdfVariant, crdfVariantAllocMap := rdfVariant.PassRef()
	__ret := C.kuzu_rdf_variant_get_int64(crdfVariant)
	runtime.KeepAlive(crdfVariantAllocMap)
	__v := (int64)(__ret)
	return __v
}

// RdfVariantGetInt32 function as declared in include/kuzu.h:1186
func RdfVariantGetInt32(rdfVariant *Value) int32 {
	crdfVariant, crdfVariantAllocMap := rdfVariant.PassRef()
	__ret := C.kuzu_rdf_variant_get_int32(crdfVariant)
	runtime.KeepAlive(crdfVariantAllocMap)
	__v := (int32)(__ret)
	return __v
}

// RdfVariantGetInt16 function as declared in include/kuzu.h:1192
func RdfVariantGetInt16(rdfVariant *Value) int16 {
	crdfVariant, crdfVariantAllocMap := rdfVariant.PassRef()
	__ret := C.kuzu_rdf_variant_get_int16(crdfVariant)
	runtime.KeepAlive(crdfVariantAllocMap)
	__v := (int16)(__ret)
	return __v
}

// RdfVariantGetInt8 function as declared in include/kuzu.h:1198
func RdfVariantGetInt8(rdfVariant *Value) int8 {
	crdfVariant, crdfVariantAllocMap := rdfVariant.PassRef()
	__ret := C.kuzu_rdf_variant_get_int8(crdfVariant)
	runtime.KeepAlive(crdfVariantAllocMap)
	__v := (int8)(__ret)
	return __v
}

// RdfVariantGetUint64 function as declared in include/kuzu.h:1204
func RdfVariantGetUint64(rdfVariant *Value) uint64 {
	crdfVariant, crdfVariantAllocMap := rdfVariant.PassRef()
	__ret := C.kuzu_rdf_variant_get_uint64(crdfVariant)
	runtime.KeepAlive(crdfVariantAllocMap)
	__v := (uint64)(__ret)
	return __v
}

// RdfVariantGetUint32 function as declared in include/kuzu.h:1210
func RdfVariantGetUint32(rdfVariant *Value) uint32 {
	crdfVariant, crdfVariantAllocMap := rdfVariant.PassRef()
	__ret := C.kuzu_rdf_variant_get_uint32(crdfVariant)
	runtime.KeepAlive(crdfVariantAllocMap)
	__v := (uint32)(__ret)
	return __v
}

// RdfVariantGetUint16 function as declared in include/kuzu.h:1216
func RdfVariantGetUint16(rdfVariant *Value) uint16 {
	crdfVariant, crdfVariantAllocMap := rdfVariant.PassRef()
	__ret := C.kuzu_rdf_variant_get_uint16(crdfVariant)
	runtime.KeepAlive(crdfVariantAllocMap)
	__v := (uint16)(__ret)
	return __v
}

// RdfVariantGetUint8 function as declared in include/kuzu.h:1222
func RdfVariantGetUint8(rdfVariant *Value) byte {
	crdfVariant, crdfVariantAllocMap := rdfVariant.PassRef()
	__ret := C.kuzu_rdf_variant_get_uint8(crdfVariant)
	runtime.KeepAlive(crdfVariantAllocMap)
	__v := (byte)(__ret)
	return __v
}

// RdfVariantGetFloat function as declared in include/kuzu.h:1228
func RdfVariantGetFloat(rdfVariant *Value) float32 {
	crdfVariant, crdfVariantAllocMap := rdfVariant.PassRef()
	__ret := C.kuzu_rdf_variant_get_float(crdfVariant)
	runtime.KeepAlive(crdfVariantAllocMap)
	__v := (float32)(__ret)
	return __v
}

// RdfVariantGetDouble function as declared in include/kuzu.h:1234
func RdfVariantGetDouble(rdfVariant *Value) float64 {
	crdfVariant, crdfVariantAllocMap := rdfVariant.PassRef()
	__ret := C.kuzu_rdf_variant_get_double(crdfVariant)
	runtime.KeepAlive(crdfVariantAllocMap)
	__v := (float64)(__ret)
	return __v
}

// RdfVariantGetBool function as declared in include/kuzu.h:1240
func RdfVariantGetBool(rdfVariant *Value) bool {
	crdfVariant, crdfVariantAllocMap := rdfVariant.PassRef()
	__ret := C.kuzu_rdf_variant_get_bool(crdfVariant)
	runtime.KeepAlive(crdfVariantAllocMap)
	__v := (bool)(__ret)
	return __v
}

// RdfVariantGetDate function as declared in include/kuzu.h:1246
func RdfVariantGetDate(rdfVariant *Value) DateT {
	crdfVariant, crdfVariantAllocMap := rdfVariant.PassRef()
	__ret := C.kuzu_rdf_variant_get_date(crdfVariant)
	runtime.KeepAlive(crdfVariantAllocMap)
	__v := *NewDateTRef(unsafe.Pointer(&__ret))
	return __v
}

// RdfVariantGetTimestamp function as declared in include/kuzu.h:1252
func RdfVariantGetTimestamp(rdfVariant *Value) TimestampT {
	crdfVariant, crdfVariantAllocMap := rdfVariant.PassRef()
	__ret := C.kuzu_rdf_variant_get_timestamp(crdfVariant)
	runtime.KeepAlive(crdfVariantAllocMap)
	__v := *NewTimestampTRef(unsafe.Pointer(&__ret))
	return __v
}

// RdfVariantGetInterval function as declared in include/kuzu.h:1258
func RdfVariantGetInterval(rdfVariant *Value) IntervalT {
	crdfVariant, crdfVariantAllocMap := rdfVariant.PassRef()
	__ret := C.kuzu_rdf_variant_get_interval(crdfVariant)
	runtime.KeepAlive(crdfVariantAllocMap)
	__v := *NewIntervalTRef(unsafe.Pointer(&__ret))
	return __v
}

// DestroyString function as declared in include/kuzu.h:1266
func DestroyString(str []byte) {
	cstr, cstrAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&str)))
	C.kuzu_destroy_string(cstr)
	runtime.KeepAlive(cstrAllocMap)
}

// QuerySummaryDestroy function as declared in include/kuzu.h:1273
func QuerySummaryDestroy(querySummary *QuerySummary) {
	cquerySummary, cquerySummaryAllocMap := querySummary.PassRef()
	C.kuzu_query_summary_destroy(cquerySummary)
	runtime.KeepAlive(cquerySummaryAllocMap)
}

// QuerySummaryGetCompilingTime function as declared in include/kuzu.h:1278
func QuerySummaryGetCompilingTime(querySummary *QuerySummary) float64 {
	cquerySummary, cquerySummaryAllocMap := querySummary.PassRef()
	__ret := C.kuzu_query_summary_get_compiling_time(cquerySummary)
	runtime.KeepAlive(cquerySummaryAllocMap)
	__v := (float64)(__ret)
	return __v
}

// QuerySummaryGetExecutionTime function as declared in include/kuzu.h:1283
func QuerySummaryGetExecutionTime(querySummary *QuerySummary) float64 {
	cquerySummary, cquerySummaryAllocMap := querySummary.PassRef()
	__ret := C.kuzu_query_summary_get_execution_time(cquerySummary)
	runtime.KeepAlive(cquerySummaryAllocMap)
	__v := (float64)(__ret)
	return __v
}

// GetVersion function as declared in include/kuzu.h:1291
func GetVersion() *byte {
	__ret := C.kuzu_get_version()
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// GetStorageVersion function as declared in include/kuzu.h:1296
func GetStorageVersion() uint64 {
	__ret := C.kuzu_get_storage_version()
	__v := (uint64)(__ret)
	return __v
}
